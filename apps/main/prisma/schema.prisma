// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-3.0.x"]
}

datasource db {
  provider          = "postgresql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

model User {
  id                  Int                @id @default(autoincrement())
  email               String             @unique()
  name                String             @unique()
  posts               Post[]
  password            String?
  emailConfirmed      DateTime?
  emailConfirmation   EmailConfirmation? @relation(fields: [emailConfirmationId], references: [id])
  emailConfirmationId Int?               @unique()
  createdAt           DateTime           @default(now())
  updatedAt           DateTime           @updatedAt()
  passwordRecovery    PasswordRecovery[]
  session             Session[]
  revokedToken        RevokedToken[]
  passwordHistory     PasswordHistory[]
  accounts            Account[]
  profile             Profile            @relation(fields: [profileId], references: [id])
  profileId           Int                @unique()

  @@unique([email, name, emailConfirmationId, profileId])
}

enum Provider {
  google
  github
}

model Account {
  id         Int      @id @default(autoincrement())
  user       User     @relation(fields: [userId], references: [id])
  userId     Int
  name       String
  email      String?
  photo      String?
  provider   Provider
  providerId String   @unique()
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt()
}

model PasswordHistory {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  password  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt()
}

model EmailConfirmation {
  id          Int      @id @default(autoincrement())
  token       String   @unique()
  isConfirmed Boolean  @default(false)
  expiresAt   DateTime
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt()
  user        User?
  userId      Int?
}

// password recovery table
model PasswordRecovery {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  token     String   @unique() /// password recovery token
  expiresAt DateTime /// password recovery token expires
  status    Int      @default(0) /// 0 - pending, 1 - confirmed, 2 - expired, 3 - deactivated
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt()
}

model Post {
  id        Int      @id @default(autoincrement())
  imageId   String
  content   String?
  author    User     @relation(fields: [authorId], references: [id])
  authorId  Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt()
}

model AuditLog {
  id        Int      @id @default(autoincrement())
  code      Int
  message   String
  timestamp DateTime @default(now())
  extraData Json
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt()
}

model Session {
  id                   String   @id @default(cuid())
  ip                   String?
  lastActiveDate       DateTime
  deviceId             String   @unique()
  deviceName           String?
  userId               Int
  refreshTokenIssuedAt DateTime

  // Связь с User
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt()

  @@unique([userId, deviceId])
}

model RevokedToken {
  id        Int      @id @default(autoincrement())
  token     String   @unique()
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt()
}

model Profile {
  id        Int       @id @default(autoincrement())
  user      User?
  userId    Int?
  firstName String?
  lastName  String?
  birthDate DateTime? @db.Date
  city      String?
  aboutMe   String?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt()
  avatarId  String?
}

model StorageTempFiles {
  id          Int      @id @default(autoincrement())
  referenceId String   @unique()
  expiresAt   DateTime
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt()
}
