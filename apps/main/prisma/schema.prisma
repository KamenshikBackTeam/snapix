// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "postgresql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

model User {
  id                  Int                @id @default(autoincrement())
  email               String             @unique
  name                String             @unique
  posts               Post[]
  password            String
  emailConfirmed      DateTime?
  emailConfirmation   Confirmations?     @relation(fields: [emailConfirmationId], references: [id])
  emailConfirmationId Int?               @unique
  createdAt           DateTime           @default(now())
  updatedAt           DateTime           @updatedAt()
  passwordRecovery    PasswordRecovery[]
  session             Session[]

  @@unique([email, name, emailConfirmationId])
}

model Confirmations {
  id          Int      @id @default(autoincrement())
  token       String   @unique
  isConfirmed Boolean  @default(false)
  expiresAt   DateTime
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt()
  user        User?
  userId      Int?
}

// password recovery table
model PasswordRecovery {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  token     String   @unique /// password recovery token
  expiresAt DateTime /// password recovery token expires
  status    Int      @default(0) /// 0 - pending, 1 - confirmed, 2 - expired, 3 - deactivated
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt()
}

model Post {
  id        Int      @id @default(autoincrement())
  title     String
  content   String?
  published Boolean? @default(false)
  author    User?    @relation(fields: [authorId], references: [id])
  authorId  Int?
}

model AuditLog {
  id        Int      @id @default(autoincrement())
  code      Int
  message   String
  timestamp DateTime @default(now())
  extraData Json
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt()
}

model Session {
  id                   String   @id @default(cuid())
  ip                   String
  lastActiveDate       DateTime
  deviceId             String
  userId               Int
  refreshTokenIssuedAt DateTime

  // Связь с User
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt()
}
